<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>多小凯</title>
    <description>Front-end Developer.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 14 Nov 2020 01:19:49 +0800</pubDate>
    <lastBuildDate>Sat, 14 Nov 2020 01:19:49 +0800</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>JavaScript 二进制 (上篇)</title>
        <description>&lt;h3 id=&quot;前情提要&quot;&gt;前情提要&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;在 JavaScript 处理二进制数据方面上常接触的只有 Node 读写文件的 Buffer 对象, 脑海中只知道 ES6 也有 ArrayBuffer 相关的二进制处理的对象, 具体两者之间有何关系及 ArrayBuffer 的相关知识, 进阶用法都算是知识盲区了, 所以打算这次好好梳理学习一下, 顺便写个博客记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 扫盲之前 😂
type ArrayBuffer = Array&amp;lt;Buffer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;arraybuffer&quot;&gt;ArrayBuffer&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;2011 年 2 月发布 ArrayBuffer 对象、TypedArray 视图和 DataView 视图是 JavaScript 操作二进制数据的接口。让 JavaScript 有了操作二进制的能力, 后面 ES6 将它们纳入了 ECMAScript 规格，并且增加了新的方法。它们都是以数组的语法处理二进制数据，所以统称为二进制数组。了解更多阅读 &lt;a href=&quot;https://es6.ruanyifeng.com/#docs/arraybuffer#&quot;&gt;ECMAScript 6 入门 ArrayBuffer&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;知识摘要&quot;&gt;知识摘要&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ArrayBuffer对象：代表内存之中的一段二进制数据，可以通过“视图”进行操作。“视图”部署了数组接口，这意味着，可以用数组的方法操作内存。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TypedArray视图：共包括 9 种类型的视图，比如Uint8Array（无符号 8 位整数）数组视图, Int16Array（16 位整数）数组视图, Float32Array（32 位浮点数）数组视图等等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DataView视图：可以自定义复合格式的视图，比如第一个字节是 Uint8（无符号 8 位整数）、第二、三个字节是 Int16（16 位整数）、第四个字节开始是 Float32（32 位浮点数）等等，此外还可以自定义字节序。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;使用的例子&quot;&gt;使用的例子&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// TypedArray 视图
const buffer = new ArrayBuffer(12);
const x1 = new Int32Array(buffer);
x1[0] = 1;

// DataView 视图
const buf = new ArrayBuffer(32);
const dataView = new DataView(buf);
dataView.getUint8(0) // 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;小结&quot;&gt;小结&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;DataView 自定义复合格式的视图的接口更像 Buffer, 或许 Buffer 是基于此实现, 如下可以看看接口对比&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 阅读完基础知识后 🤔
DataView == Buffer ?

// DataView 接口列表
- getInt8：读取 1 个字节，返回一个 8 位整数。
- getUint8：读取 1 个字节，返回一个无符号的 8 位整数。
- getInt16：读取 2 个字节，返回一个 16 位整数。
- getUint16：读取 2 个字节，返回一个无符号的 16 位整数。
- getInt32：读取 4 个字节，返回一个 32 位整数。
- getUint32：读取 4 个字节，返回一个无符号的 32 位整数。
- getFloat32：读取 4 个字节，返回一个 32 位浮点数。
- getFloat64：读取 8 个字节，返回一个 64 位浮点数。

- setInt8：写入 1 个字节的 8 位整数。
- setUint8：写入 1 个字节的 8 位无符号整数。
- setInt16：写入 2 个字节的 16 位整数。

// Buffer 接口列表
- buf.readDoubleBE([offset])
- buf.readDoubleLE([offset])
- buf.readFloatBE([offset])
- buf.readFloatLE([offset])
- buf.readInt8([offset])
- buf.readInt16BE([offset])
- buf.readInt16LE([offset])
- buf.readInt32BE([offset])
- buf.readInt32LE([offset])
- buf.readIntBE(offset, byteLength)
- buf.readIntLE(offset, byteLength)
- buf.readUInt8([offset])
- ...

- buf.writeDoubleBE(value[, offset])
- buf.writeDoubleLE(value[, offset])
- buf.writeFloatBE(value[, offset])
- ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;buffer&quot;&gt;Buffer&lt;/h3&gt;
&lt;h4 id=&quot;代码实现&quot;&gt;代码实现&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;那么我们可以瞧瞧 Buffer 的代码实现了, Buffer 对象由 Buffer.form 构造而成，注意通过 new 关键字构造用法已经废弃, 以下代码基于 &lt;a href=&quot;https://github.com/nodejs/node&quot;&gt;nodejs/node&lt;/a&gt;, version: 564fcb8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// lib/buffer.js#290

Buffer.from = function from(value, encodingOrOffset, length) {
  if (typeof value === 'string')
    return fromString(value, encodingOrOffset);

  if (typeof value === 'object' &amp;amp;&amp;amp; value !== null) {
    if (isAnyArrayBuffer(value))
      return fromArrayBuffer(value, encodingOrOffset, length);
   
   ...   
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;简化下来发现工厂模式 Buffer.from 方法最终都是返回了一个 FastBuffer 实例&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Buffer.from(str[, encoding]) -&amp;gt; fromString -&amp;gt; new FastBuffer()
Buffer.from(arrayBuffer[, byteOffset[, length]]) -&amp;gt; fromArrayBuffer -&amp;gt; new FastBuffer()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 真相大白后 😱
👇 Buffer 尽然是 Uint8Array（无符号 8 位整数）数组视图 👇
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// lib/internal/buffer.js#952
class FastBuffer extends Uint8Array {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;那么 Uint8Array 的 Buffer 是如何实现读写其他 Int16， Uint16, Float32, Float64 接口 ? 去瞧瞧 
buf.writeUInt16BE 的实现吧&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// lib/internal/buffer.js#828
function writeU_Int16BE(buf, value, offset, min, max) {
  value = +value;
  checkInt(value, min, max, buf, offset, 1);

  buf[offset++] = (value &amp;gt;&amp;gt;&amp;gt; 8); // 按位操作符
  buf[offset++] = value;
  return offset;
}

function writeUInt16BE(value, offset = 0) {
  return writeU_Int16BE(this, value, offset, 0, 0xffff);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里先简单回顾一下 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators&quot;&gt;JavaScript 按位操作符&lt;/a&gt;, 如上 value »&amp;gt; 8 是向右移了 8位, 我们可以看看下面数字9(十进制)向右移到两位的例子&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     9 (base 10): 00000000000000000000000000001001 (base 2)
                  --------------------------------
9 &amp;gt;&amp;gt;&amp;gt; 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;回到 writeU_Int16BE，原来是写 16 位时, 会通过占用 2 个字节的形式各存储 8 位, 举个例子, 如 16 位的 1000000000000000(32768), 如上的代码第一个字节存储的是向右移了 8 位的 10000000(128), 第二个字节直接赋值给 1000000000000000, 第二个字节超出了 8 位怎么办 ? 超出会截掉头部 ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const b = new ArrayBuffer(2)

const v = new Uint8Array(b)
undefined
v[0] = 128
128
v[1] = 32768
32768
v
Uint8Array(2) [128, 0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;如上的代码运算也验证了猜想, 第二个字节头部超出的 8 位被截掉了。 原来 Buffer 实现的其他位数操作接口都是被修饰抹平后的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;字节序&quot;&gt;字节序&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;仔细发现 Buffer 比 DataView 多了一些接口, 比如有 &lt;strong&gt;&lt;em&gt;字节序&lt;/em&gt;&lt;/strong&gt; 的概念, 如 buf.writeInt32BE, buf.writeInt32LE, DataView 只有 setInt32&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;计算机硬件有两种储存数据的方式：大端字节序（big endian）和小端字节序（little endian）。
举例来说，数值0x2211使用两个字节储存：高位字节是0x22，低位字节是0x11。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;大端字节序：高位字节在前，低位字节在后，这是人类读写数值的方法。
小端字节序：低位字节在前，高位字节在后，即以0x1122形式储存。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;我的理解是用高字节写就用高字节读, 低字节写就用高低字节读就行, 不然存储的 AB, 读出来的是 BA 。了解更多阅读 &lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/11/byte-order.html&quot;&gt;理解字节序&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;使用场景&quot;&gt;使用场景&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;在浏览器端操作二进制会比较少见, 这不 Webpack v5 发布不久, 这里还是讲讲 Node 上的实践, 其中 Webpack v5 的 &lt;strong&gt;&lt;em&gt;本地持久缓存&lt;/em&gt;&lt;/strong&gt; 功能里二进制相关的操作是可以好好学一下的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;如何通俗的解释这个功能点了? 大家知道首次编译后, 修改代码后再次的编译耗时是非常短的, 这是 MemoryCachePlugin 的功能, 它能在编译后把需要都数据都缓存在内存中, 接下来的编译当文件的时间戳没有变化都是直接返回上一次的运行结果。在一个运行时里面往内存读取数据还是比较简单的, 内存缓存相关的这一点就细不说了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;那么如何理解 IdleFileCachePlugin 实现的持久缓存功能? 简单说就是把本次的编译的数据写入文件中, 当本次编译结束进程退出, 后面重新 npm start 的时候在会从缓存文件中把各个模块上次编译结果读取出来以此来减少大量的编译时间。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;大量的文件操作当然是直接操作二进制比较快, 对于 JavaScript 的 5 种基本数据类型 Undefined、Null、Boolean、Number、String 以及复杂的数据类型 Object 的序列化与反序列化, 代码压缩等 Webpack 做的各种策略还是能好好讲解一下的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;这部分的代码讲解就放在下一篇文章吧 …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1605297615876&amp;amp;di=a8600be2381d57666a014d9b63692976&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fpic4.zhimg.com%2F50%2Fv2-48f30f9964e3207b7c45aa54428e803b_hd.jpg&quot; alt=&quot;下次见～&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;关于本篇文章作者理解有误或其他讨论 &lt;a href=&quot;https://github.com/xiaoxiaojx/blog/issues&quot;&gt;Issues&lt;/a&gt; 见 ~&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Wed, 04 Nov 2020 14:32:24 +0800</pubDate>
        <link>http://localhost:4000/2020/11/javascripts-binary-1/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/11/javascripts-binary-1/</guid>
        
        
      </item>
    
      <item>
        <title>Snowpack 更快的前端构建工具</title>
        <description>&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;最近对脚手架技术架构的升级改造, 虽然在构建速度方面提升了3+倍, 接入项目的大佬们也都甚为满意, 毕竟还是没能达到秒级的开发体验。想着这算到了 webpack 的瓶颈了, 要去调研更快的打包工具及落地的可能性了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;现状&quot;&gt;现状&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;新的脚手架对 webpack 的构建速度优化简述为以下几点, 后面可以单独展开分享一下&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;多线程&lt;/li&gt;
  &lt;li&gt;前置构建&lt;/li&gt;
  &lt;li&gt;多页面动态编译/&lt;a href=&quot;https://github.com/xiaoxiaojx/dynamic-routes-webpack-plugin&quot;&gt;单页多路由动态编译&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;loader缓存/plugin缓存&lt;/li&gt;
  &lt;li&gt;持久缓存&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;参赛工具&quot;&gt;参赛工具&lt;/h2&gt;

&lt;h3 id=&quot;parcel&quot;&gt;Parcel&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4aed5ca8aa1e4163b663888cf9bc9f68~tplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;其实一直是写 demo 的首选, 说要落地到生产, 没想过 … 官网上宣传的速度只是 webpack 的两倍左右, 加上仅存的三两项目遇到的一些 bug(陆续也转到了 webpack), 算上社区的活跃度，没有实践的动力。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;对 parcel 的评估只是个人的经验, 缺乏数据说明。话说回来即使是稳定且健壮的 parcel 也是达不到我们最初的秒级的开发体验。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;小结-parcel-仍然不适合中大型项目&quot;&gt;小结: parcel 仍然不适合中大型项目。&lt;/h4&gt;

&lt;h3 id=&quot;snowpack&quot;&gt;Snowpack&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/abec98eb1c554e328b807d9a3b684dd8~tplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;终于回到了本次的主题, 为什么说 snowpack 快 ? 它是希望你能写出浏览器直接能运行的代码, 你说它能不快吗 … 当然还是要有理有据, 看看官方解释。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;snowpack-leverages-javascripts-native-module-system-known-as-esm-to-create-a-first-of-its-kind-build-system-that-never-builds-the-same-file-twice-snowpack-pushes-changes-instantly-to-the-browser-saving-you-hours-of-development-time-traditionally-spent-waiting-around-for-your-bundler&quot;&gt;Snowpack leverages JavaScript’s native module system (known as ESM) to create a first-of-its-kind build system that never builds the same file twice. Snowpack pushes changes instantly to the browser, saving you hours of development time traditionally spent waiting around for your bundler.&lt;/h5&gt;

&lt;h4 id=&quot;主要帮我们做了什么&quot;&gt;主要帮我们做了什么&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 1. 把项目依赖的 node_modules 模块通过 rollup 编译成 esm 标准代码输出到 
build/web_modules 目录

# snowpack/src/commands/dev.ts#297

// 如果是不存在 'package-lock.json' 或者 'yarn.lock'|| 'package-lock.json' 或者 'yarn.lock' 有变化 || 第一次构建 等情况会重新编译
if (!(await checkLockfileHash(DEV_DEPENDENCIES_DIR)) || !existsSync(dependencyImportMapLoc)) {
// ...
}

# 2. 通过 babel 编译 ts, tsx, js, jsx 代码输出到 build/_dist_ 目录(毕竟浏览器跑不了 jsx, ts 代码)

# plugins/plugin-babel/worker.js#4

async function transformFileAsync(path, options) {
  const {code, map} = await babel.transformFileAsync(path, options);
  return JSON.stringify({code, map});
}

// 使用如下文件的 babel 配置
# app-scripts-react/babel.config.json

// 实践证明 @babel/preset-typescript 坑不少, 老项目上线几个白屏几个
{
  &quot;presets&quot;: [[&quot;@babel/preset-react&quot;], &quot;@babel/preset-typescript&quot;],
  &quot;plugins&quot;: [&quot;@babel/plugin-syntax-import-meta&quot;],
  &quot;env&quot;: {
    &quot;development&quot;: {
      &quot;plugins&quot;: [
        &quot;react-refresh/babel&quot;
      ]
    }
  }
}

# 3. 开发环境启动一个 devServer

# snowpack/src/commands/dev.ts#875

const server = createServer((req, res) =&amp;gt; {
// ...
})

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;demo-目录结构对比&quot;&gt;demo 目录结构对比&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  new-dir tree src
src
├── App.css
├── App.jsx
├── App.test.jsx
├── index.css
├── index.jsx
├── logo.svg
└── test.css

➜  new-dir tree build
build
├── __snowpack__
│   └── env.js
├── _dist_
│   ├── App.css
│   ├── App.js
│   ├── index.css
│   ├── index.css.proxy.js
│   ├── index.js
│   ├── logo.svg
│   ├── logo.svg.proxy.js
│   └── test.css
├── favicon.ico
├── index.html
├── robots.txt
└── web_modules
    ├── import-map.json
    └── react-dom.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;发现的一些问题&quot;&gt;发现的一些问题&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;源码可能会被篡改&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# plugins/plugin-babel/plugin.js#42

code = code.replace(/process\.env/g, 'import.meta.env');

// 会造成如下问题

// src
function getEnvLabel() {
 return 'process.env.NODE_ENV'
}
// dist
function getEnvLabel() {
 return 'import.meta.env'
}

// enum ....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;css 文件 @import 另一个 css 文件不会处理
    &lt;blockquote&gt;
      &lt;p&gt;没有进行 ast 语法分析, 你只能在 js 文件里面 import, 也许你想着帮忙一起完善这块, 到了日趋完善的一天发现之前不就有一个成熟的 webpack 为何不用 ? 这 …&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;….&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;小结&quot;&gt;小结&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;现在的 snowpack 还是希望你能写出浏览器直接能运行的代码, 对于新小项目开发环境可尝试, 其他还是先等一等 …&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Tue, 29 Sep 2020 14:32:24 +0800</pubDate>
        <link>http://localhost:4000/2020/09/snowpack/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/09/snowpack/</guid>
        
        
      </item>
    
      <item>
        <title>React, TypeScript 写游戏探索</title>
        <description>&lt;h3 id=&quot;简单介绍&quot;&gt;简单介绍&lt;/h3&gt;
&lt;h4 id=&quot;游戏按键如下图&quot;&gt;游戏按键如下图&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/80/v2-1c2f1967b8bb694a8c2fc0083d73d3ea_hd.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;顶这个墙出现蘑菇-此蘑菇接了才可以发子弹&quot;&gt;顶这个墙出现蘑菇, 此蘑菇接了才可以发子弹&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/80/v2-b0397d7642f871fe3bc1f197f9edd6fd_hd.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;react-写游戏的一些心得&quot;&gt;React 写游戏的一些心得&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://d3hp955ol7sp5f.cloudfront.net/ReactJSstatic/images/webpack/b736f282b84b3f116be4319681af8b94.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-react的优势&quot;&gt;1. React的优势&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;数据驱动&lt;/strong&gt;, 根据state或者props的变化 =&amp;gt; 视图的变化, 以前的方式往往是直接操作 DOM 实现, 触发某事件使得元素移动代码类似如:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    moveRight() {
        this.left += 8;
        this.draw();
    }

    draw() {
        if(this.ele === null){
            this.ele = document.createElement('img');
            this.ele.src = this.url;
            this.ele.style.width = this.width + 'px';
            this.ele.style.height = this.height + 'px';
            this.ele.style.position = 'absolute';
            app.appendChild(this.ele);
        }
        this.ele.style.left = this.left + 'px';
        this.ele.style.top = this.top + 'px';
    };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;现在就友好很多&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    moveRight() {
        this.setState( preState =&amp;gt; (
            {
                left: preState.left + 8
            }
        ));
    }

    &amp;lt;ContraBG
        left={left}
        top={top}
        status={status}
        toward={toward}&amp;gt;
    &amp;lt;/ContraBG&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;结构更清晰&lt;/strong&gt;, 逐个书写需要渲染的组件, 能让人一目了然的知道游戏运行中加载的组件, 老的方式代码风格去渲染一个元素如&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    const contra = new Contra();
    const bulletsMap = new BulletsMap();
    const enemiesMap = new EnemiesMap();
    contra.draw();
    bulletsMap.draw();
    enemiesMap.draw();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果渲染的多了结构复杂了,阅读就会十分困难。现在的代码风格就能够一目了然的看到所有运行的组件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=&amp;gt;
    @observer
    class InGame extends React.PureComponent&amp;lt;InGameProps, {}&amp;gt; {
        render() {
            const { store } = this.props;
    
            return (
                &amp;lt;InGameBG   // 包裹组件负责渲染背景变化相关
                        store={store}&amp;gt;
                        &amp;lt;Contra // 玩家控制的角色组件
                            store={store}/&amp;gt;
                        &amp;lt;BulletsMap // 负责渲染子弹
                            store={store}/&amp;gt;
                        &amp;lt;EnemiesMap // 负责渲染敌方角色
                            store={store}/&amp;gt;
                &amp;lt;/InGameBG&amp;gt;
            );
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-react的劣势&quot;&gt;2. React的劣势&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;前者类与类之间继承会灵活很多, 如&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    飞机继承至飞行物 =&amp;gt; 飞行物继承至动态物 =&amp;gt; 动态物继承至某一特性物体
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;React 不推崇继承, 可采用组合, HOC高阶组件思想去渲染一系列具有相似性质的组件。如超级玛丽游戏中有许多的墙,它们具有相似的渲染逻辑,以及一些都会需要用到的方法, 可以通过写一个静态方块的高阶组件去生成, 能够更高效的管理代码。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    function WithStaticSquare&amp;lt;TOwnProps&amp;gt;(options: StaticSquareOption):ComponentDecorator&amp;lt;TOwnProps&amp;gt; {
        return Component =&amp;gt;
            class HocSquare extends React.Component&amp;lt;TOwnProps, HocSquareState&amp;gt; {
                // xxx
                render() {
                    const { styles, className } = this.state;
                    const passThroughProps: any = this.props;
                    const classNames = className ? `staticHocWrap ${className}` : &quot;staticHocWrap&quot;;
    
    
                    const staticProps: WrappedStaticSquareUtils = {
                        changeBackground: this.changeBackground,
                        toTopAnimate: this.toTopAnimate
                    };  // 提供一些可能会用到的改变背景图的方法以及被撞时调用向上动画的方法
    
                    return (
                        &amp;lt;div
                            className={classNames}
                            style={styles}&amp;gt;
                            &amp;lt;Component
                                hoc={staticProps}
                                {...passThroughProps}/&amp;gt;
                        &amp;lt;/div&amp;gt;
                    );
                }
            }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-性能问题&quot;&gt;3. 性能问题&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;避免卡顿&lt;/strong&gt; 前者直接操作某个DOM渲染不会有太多卡顿现象发生
React使用Mobx, Redux等进行整个游戏数据控制时, 如果不对渲染进行优化, 当store某个属性值变化导致所有接入props的组件都重新渲染一次代价是巨大的!
    &lt;ol&gt;
      &lt;li&gt;采用 PureComponent 或者为 Component 加入 shouldComponentUpdate&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    class Square extends React.PureComponent&amp;lt;SquareProps, {}&amp;gt; {
        // xxx
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;其中就需要了解PureComponent。React.PureComponent是2016.06.29 React 15.3中发布。&lt;img src=&quot;http://p5.qhimg.com/t0131e05b31c1284209.gif&quot; alt=&quot;image&quot; /&gt;
PureComponent改变了生命周期方法shouldComponentUpdate，并且它会自动检查组件是否需要重新渲染。这时，只有PureComponent检测到state或者props发生变化时，PureComponent才会调用render方法,但是这种检查只是浅计较这就意味着嵌套对象和数组是不会被比较的&lt;a href=&quot;https://60devs.com/pure-component-in-react.html&quot;&gt;更多信息&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;多采用组件去渲染, 对比两种方法&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    // 方法1.
    &amp;lt;InGameBG   // 包裹组件负责渲染背景变化相关
            store={store}&amp;gt;
            &amp;lt;Contra // 玩家控制的角色组件
                store={store}/&amp;gt;
            &amp;lt;BulletsMap // 负责渲染子弹
                store={store}/&amp;gt;
            &amp;lt;EnemiesMap // 负责渲染敌方角色
                store={store}/&amp;gt;
    &amp;lt;/InGameBG&amp;gt;
    //方法2.
    &amp;lt;InGameBG
        store={store}&amp;gt;
            &amp;lt;Contra
                store={store}/&amp;gt;
            &amp;lt;div&amp;gt;
                {
                    bulletMap.map((bullet, index) =&amp;gt; {
                    if ( bullet ) {
                        return (
                            &amp;lt;Bullet
                                key={`Bullet-${index}`}
                                {...bullet}
                                index={index}
                                store={store}/&amp;gt;
                        );
                    }
                    return null;
                })
                }
            &amp;lt;/div&amp;gt;
            &amp;lt;EnemiesMap
                store={store}/&amp;gt;
    &amp;lt;/InGameBG&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;这两种方法的区别就是在于渲染子弹是否通过组件渲染还是在父组件中直接渲染, 其中方法2的性能会有很大的问题, 当某个子弹变化时使得最大的容器重新渲染, 其中所有子组件也会去判断是否需要重新渲染，使得界面会出现卡顿。而方法1则只会在发生数据变化的子弹去渲染。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;getLazyLoadMap 对地图的实时切割渲染(非常重要!!!)&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const LIMIT: number = 16;
const GAME_WIDTH: number = 512;

@observer
class SquaresMap extends React.PureComponent&amp;lt;SquaresMapProps, {}&amp;gt; {
    getLazyLoadMap() {
        const { staticSquareMap, inGameGBLeft } = this.props.store;
        const OFFSET = Math.abs(inGameGBLeft) / GAME_WIDTH * LIMIT;
        return staticSquareMap.reduce((preVal, currentVal) =&amp;gt; {
            const items = [...currentVal];
            const current = items.splice(OFFSET, LIMIT);
            preVal.push(current);
            return preVal;
        }, [] as StaticSquareManagementType[][]);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-需要注意的点&quot;&gt;4. 需要注意的点&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;及时移除监听&lt;/strong&gt;, 在组件卸载时需要移除该组件的事件监听, 时间函数等。如游戏开始组件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    class GameStart extends React.Component&amp;lt;GameStartProps, {}&amp;gt; {
        constructor(props) {
            super(props);
    
            this.onkeydownHandle = this.onkeydownHandle.bind(this);
        }
        componentDidMount() {
            this.onkeydown();
        }
        componentWillUnmount() {
            this.destroy();
        }
        destroy(): void {
            console.log(&quot;游戏开始! GameStart Component destroy ....&quot;);
            window.removeEventListener(&quot;keydown&quot;, this.onkeydownHandle);
        }
        onkeydownHandle(e: KeyboardEvent): void {
            const keyCode: KeyCodeType = e.keyCode;
            const {  store } = this.props;
            const { updateGameStatus } = store;
            switch ( keyCode ) {
                case 72:
                    updateGameStatus(1);
                    break;
            }
        }
        onkeydown(): void {
            window.addEventListener(&quot;keydown&quot;, this.onkeydownHandle);
        }
        render() {
            return (
                &amp;lt;div className=&quot;gameStartWrap&quot;&amp;gt;
                &amp;lt;/div&amp;gt;
            );
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 30 Aug 2017 14:32:24 +0800</pubDate>
        <link>http://localhost:4000/2017/08/super-contra/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/super-contra/</guid>
        
        
      </item>
    
  </channel>
</rss>
